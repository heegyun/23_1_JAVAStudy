----------*** interface 작성 방법 ---------------------------------------------------------------
위 코드와 같이 인터페이스는 class가 아닌 interface 라는 키워드를 이용하여 작성한다.
인터페이스 구현은 implements 라는 키워드를 사용한다.
인터페이스의 메소드는 이름만 있고 그 내용은 없다.
멤버가 추상메소드+ 상수로만 구성됨.
----------------------------------------------------------------------------------------------------
그리고 Tiger, Lion 은 작성한 인터페이스를 구현하도록 변경한다.
public class Tiger extends Animal implements Predator { }
public class Lion extends Animal implements Predator { }

Tiger, Lion이 Predator 인터페이스를 구현하면 ZooKeeper 클래스의 feed 메소드를 다음과 같이 변경 할 수 있다.
----**** 변경전 ***-----
public void feed(Tiger tiger) {
    System.out.println("feed tiger");
}

public void feed(Lion lion) {
    System.out.println("feed lion");
}
----**** 변경후***---
public void feed(Predator predator) {
    System.out.println("feed tiger");
}
--------------------------------------------------
tiger - Tiger 클래스의 객체, Predator 인터페이스의 객체
lion - Lion 클래스의 객체, Predator 인터페이스의 객체
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
※ 객체가 한 개 이상의 자료형 타입을 갖게 되는 특성을 다형성(폴리모피즘)이라고 한다.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
그런데 위 ZooKeeper 클래스에 약간의 문제가 발생했다. 아래의 ZooKeeper클래스의 feed 메소드를 보면 호랑이가 오던지,
사자가 오던지 무조건 "feed tiger"라는 문자열을 출력한다.
사자가 오면 "feed lion"을 출력해야 하지 않겠는가! Predator 인터페이스에 다음과 같은 메소드를 추가 해 보자.

public interface Predator {
    public String getName();
}
getName이라는 메소드는 인터페이스를 implements한 클래스들이 구현해야만 하는 것이다.
인터페이스에 위처럼 메소드를 추가하면 Tiger, Lion등 Predator 인터페이스를 구현한 클래스들에서 컴파일 오류가 발생할 것이다.
Tiger, Lion에 getName 메소드를 구현하도록 하자.
public class Tiger extends Animal implements Predator {
    public String getName() {
        return this.name;
    }
}

public class Lion extends Animal implements Predator {
    public String getName() {
        return this.name;
    }
}

이제 ZooKeeper 클래스도 다음과 같이 변경이 가능하다.
-----------------------------------------------------------------------------------------------------------------
public class ZooKeeper {
    public void feed(Predator predator) {
        System.out.println("feed "+predator.getName());
    }
    public static void main(String[] args) {
        Tiger tiger = new Tiger();
        tiger.setName("tiger");
        Lion lion = new Lion();
        lion.setName("lion");
        ZooKeeper zooKeeper = new ZooKeeper();
        zooKeeper.feed(tiger);
        zooKeeper.feed(lion);
    }
}
----------------------------------------------------------------------------------------------------------------
