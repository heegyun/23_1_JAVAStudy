### MVC패턴의 이해 ###
1. MVC 패턴
 - Model - View - Controller의 약어
 - GUI 기반의 애플리케이션 개발에 사용되는 디자인 패턴
 - 지금은 백엔드 기반의 웹 애플리케이션 개발의 기본 모델이 됨
 - MVC 패턴의 목적은 화면과 데이터 처리를 분리하여 코드 간 종속성을 줄이는 것임
 - 즉 구성요소 간 역할을 명확하게 하여 코드를 쉽게 분리하고 협업이 용이해짐
 - 소프트웨어를 효과적으로 설계하는 디자인 패턴 중 하나
 - 화면구성 요소와 프로그램의 로직, 화면에 표현되는 데이터를 분리해야 하므로 사용하는 패턴


2. MVC 패턴 구조

               요청(request)                                        <모델> DO
                                                                   데이터처리
  클라이언트     --------->      <컨트롤러> 서블릿 or JSP     -------------------->  <모델> DAO   <---------------->  DB
                                       |
                                       |
                                      <뷰>
                                       JSP

2.1] 모델 (Model)
  - 데이터를 처리하는 영역
  - 일반적으로 데이터베이스와 연동을 위한 DAO(Data Access Object)클래스와 데이터 구조를 표현하는 DO(Data Object, 엔티티클래스)등으로 구성됨
  - 모델은 뷰나 컨트롤러에 독립적인 구조로 데이터베이스 처리를 필요로 하는 여러 애플리케이션에서 공유할 수 있으며 웹 어플리케이션이 아닌 경우에도 사용할 수 있음
 
2.2] 뷰(View)
 - 화면 구성을 담당하는 영역
 - 주어진 데이터를 출력하는 용도로만 사용하는 것이 바람직함
 - 뷰에서 데이터를 직접 가져오는 방식은 권장하지 않음
 - HTML 이외에 EL, JSTL 등을 사용해 컨트롤러부터 전달 받은 데이터를 출력하고 HTML, CSS등을 통해 화면을 디자인 함

2.3] 컨트롤러(Contrller)
 - MVC 패턴의 핵심으로 모든 사용자의 요청의 중심에 위치함
 - 사용자 요청은 특정 뷰에 바로 전달되지 않고 컨트롤러를 통해야 함
 - 컨트롤러는 사용자 요청에 따라 모델을 통해 데이터베이스와 연동하여 데이터를 처리하고 뷰에 전달함
 - 뷰로 전달하기 위해 데이터가 들어 있는 DO 혹은 List<DO> 형태의 객체를 request에 저장한 후 포워딩함
